#1 마우스오버(마우스엔터), 마우스 올렸을때
.mouseenter()
// mouseover() 메소드를 사용한 방법
$(function () {
        let i = 0;
        $(".overout").mouseover(function () {
          $("p:first", this).text("mouseover");
          $("p:last", this).text(++i);
        });

.on('mouseenter', function();)
$(".enterleave").mouseenter(function () {
          $("p:first", this).text("mouseenter");
          $("p:last", this).text(++j);
        });

$(".overout").mouseover(function () { // mouseover 이벤트를 사용한 방법
          $("p:first", this).text("mouseover");
          $("p:last", this).text(++i);
        });

#2 마우스아웃, 마우스 벗어났을때
.mouseleave()
$(".overout").mouseout(function () {
          $("p:first", this).text("mouseout");
        });
// mouseout() 메소드를 사용한 방법

.on('mouseleave', function();)
 $(".enterleave").mouseleave(function () {
          $("p:first", this).text("mouseleave");
        });
// mouseleave 이벤트를 사용한 방법

$(".hover").hover(
          function () {//마우스를 올렸을때
            $("p:first", this).text("hover");
            $("p:last", this).text(++k);
          },
          function () {//마우스를 올리지않았을
            $("p:first", this).text("hover아닐때");
          }
        );
      });

*키보드의 번호를 알고싶을때 쓰는 함수
 $(document).keydown(function (e) {
          let num = e.keyCode;
          let direct = "";
          console.log(num);

1. screenX, screenY
$(document).mousemove(function (e) {
$(".screenX").text("페이지를 기준으로 한 x좌표 : " + e.screenX);
$(".screenY").text("페이지를 기준으로 한 y좌표 : " + e.screenY);
        });
//사용자 모니터 화면을 기준으로 한 좌표를 표시합니다.
사용자 모니터의 왼쪽 상단 모서리가 (0, 0)이 됩니다.


2. pageX, pageY
$(document).mousemove(function (e) {
$(".pageX").text("페이지를 기준으로 한 x좌표 : " + e.pageX);
$(".pageY").text("페이지를 기준으로 한 y좌표 : " + e.pageY);
//전체 문서를 기준으로 한 좌표를 표시합니다.
위 그림과 같이, 만약 문서를 표현할 때 스크롤이 생긴다면,
특정 지점의 pageY 좌표값은 페이지가 스크롤 될때마다 변경 될 것입니다.
 
3. clientX, clientY
$(document).mousemove(function (e) 
$(".clientX").text("브라우저를 기준으로 한 x좌표 : " + e.clientX);
$(".clientY").text("브라우저를 기준으로 한 y좌표 : " + e.clientY);
//브라우저에서 사용자에게 웹페이지가 보여지는 영역을 기준으로 좌표를 표시합니다.
따라서, 스크롤바가 움직이더라도, 특정 지점의 clientX, clientY의 값은 동일합니다.

*키보드방향키를 이용하여 실행할때 쓰는함수
 $(document).keydown(function (e) {
          let num = e.keyCode;
          let direct = "";
          console.log(num);
          if (num == 37) {
            direct = "left";
            $("div").css({ left: "-=10px" });
          } else if (num == 39) {
            direct = "right";
            $("div").css({ left: "+=10px" });
          } else if (num == 38) {
            direct = "top";
            $("div").css({ top: "-=10px" });
          } else {
            direct = "bottom";
            $("div").css({ top: "+=10px" });
          }
          if (direct) $("#user_dir").val(direct);
        });
});

*클릭을 이용하여 상하좌우를 실행하는 함수
$("button").click(function () {
   let direct = $(this).text();
   console.log(direct);
   if (direct == "left") {
   $("div").css({ left: "-=10px" });
   } else if (direct == "right") {
   $("div").css({ left: "+=10px" });
    } else if (direct == "top") {
    $("div").css({ top: "-=10px" });
    } else {
    $("div").css({ top: "+=10px" });
    }
   if (direct) $("#user_dir").val(direct);
   });

*on 이벤트 함수=한 번만 실행된 후 자체적으로 제거되는 이벤트를 첨부하려면 on() 메소드
$(function () {
        //$("button").click(function () {});
        let i = 0;

        /*$("button").on("click mouseenter", function () {
          let wd = $("div").width();
          $("div").animate({ width: wd * 2 }, 500);
        });*/
        $("button").on({
          click: function () {
            i++;
            if (i >= 3) {
              $(this).off(); //이벤트제거
              i = 0;
            }
            let wd = $("div").width();
            $("div").animate({ width: wd * 2 });
          },
          mouseenter: function () {
            let wd = $("div").width();
            $("div").animate({ width: wd / 2 });
          },
        });
      });

*반복적인 함수를 매개변수를 이용하여 간단하게 서식
 <script>
      $(function () {
        function myfnc(direct) {
          if (direct == "left" || direct == 37) {
            $("div").css({ left: "-=10px" });
          } else if (direct == "right" || direct == 39) {
            $("div").css({ left: "+=10px" });
          } else if (direct == "top" || direct == 38) {
            $("div").css({ top: "-=10px" });
          } else {
            $("div").css({ top: "+=10px" });
          }
          if (direct) $("#user_dir").val(direct);
        }
        $("button").click(function () {
          let txt = $(this).text();
          console.log(txt);
          myfnc(txt); //left,right,top,bottom의 매개변수
        });
        $(document).keydown(function (e) {
          let num = e.keyCode; //37,38,39,40의 매개변수로 함수 실행
          myfnc(num); //37,38,39,40의 매개변수
        });
      });
    </script>

*each() 함수의 개념
jQuery의 each() 메서드는 배열, Map, 그리고 객체를 매개변수로 받아, 마치 반복문처럼 그 요소들을 검사하고 반복할수 있도록 하는 함수입니다

<script>
      $(function () {
        $("body").append('<p class="info"></p>');
        $("ul li").each(function () {
          $(".info").append($(this).text() + "<br>");
        });
        let arr = ["서울", "부산", "대전", "대구", "제주도"];
        $.each(arr, function (index, item) {
          let result = index + item + "<br>";
          $(".info").append(result);
        });
        let obj = {
          daum: "http://www.daum.net",
          naver: "http://www.naver.com",
          google: "http://www.google.com",
        };
        $.each(obj, function (index, item) {
          let result = "index : " + index + "item : " + item + "<br>";
          $(".info").append(result);
        });
        let multi = [
          { title: "다음", url: "http://www.daum.net" },
          { title: "네이버", url: "http://www.naver.com" },
          { title: "구글", url: "http://www.google.com" },
        ];
        $.each(multi, function (index, item) {
          let result = index + item.title + item.url + "<br>";
          $(".info").append(result);
        });
      });

